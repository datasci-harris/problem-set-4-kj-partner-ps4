---
title: "Problem Set 4"
format: 
  pdf:
    keep-tex: true
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---

**PS4:** Due Sat Nov 2 at 5:00PM Central. Worth 100 points. 

## Style Points (10 pts)

## Submission Steps (10 pts)

## Download and explore the Provider of Services (POS) file (10 pts)

1. 
The variables I pulled are "PRVDR_CTGRY_SBTYP_CD", "PRVDR_CTGRY_CD", "FAC_NAME", "PRVDR_NUM", "PGM_TRMNTN_CD", and "ZIP_CD".

2. 
    a. The number of short-term hospitals is 7245.
    b. Accoding to the American Hospital Association's report, we can see there were 4840 community hospitals in 2016. It is really different to the number of short-term hospital we get, which is 7245. The potential reason might be the different definition of short-term hospitals. AHA's definition of community hospitals might be different with the definition of short-term hospitals from the question, so the counts would have a huge difference.
```{python}
import pandas as pd
file_path = '/Users/Kaijie/Desktop/problem-set-4-kj-partner-ps4/pos2016.csv'
pos2016_data = pd.read_csv(file_path)

short_term_hospitals_2016 = pos2016_data[(pos2016_data['PRVDR_CTGRY_CD'] == 1) & (pos2016_data['PRVDR_CTGRY_SBTYP_CD'] == 1)]

num_short_term_hospitals_2016 = short_term_hospitals_2016.shape[0]
print(num_short_term_hospitals_2016)
```

3. 
The number of short-term hospital in 2017 is 7260. It is 7277 in 2018, and 7303 in 2019.
```{python}
### 2017 Data
file_path_2017 = '/Users/Kaijie/Desktop/problem-set-4-kj-partner-ps4/pos2017.csv'
pos2017_data = pd.read_csv(file_path_2017)

short_term_hospitals_2017 = pos2017_data[(pos2017_data['PRVDR_CTGRY_CD'] == 1) & (pos2017_data['PRVDR_CTGRY_SBTYP_CD'] == 1)]

num_short_term_hospitals_2017 = short_term_hospitals_2017.shape[0]
print(num_short_term_hospitals_2017)

### 2018 Data
file_path_2018 = '/Users/Kaijie/Desktop/problem-set-4-kj-partner-ps4/pos2018.csv'
pos2018_data = pd.read_csv(file_path_2018, encoding='latin1')

short_term_hospitals_2018 = pos2018_data[(pos2018_data['PRVDR_CTGRY_CD'] == 1) & (pos2018_data['PRVDR_CTGRY_SBTYP_CD'] == 1)]

num_short_term_hospitals_2018 = short_term_hospitals_2018.shape[0]
print(num_short_term_hospitals_2018)

### 2019 Data
file_path_2019 = '/Users/Kaijie/Desktop/problem-set-4-kj-partner-ps4/pos2019.csv'
pos2019_data = pd.read_csv(file_path_2019, encoding='latin1')

short_term_hospitals_2019 = pos2019_data[(pos2019_data['PRVDR_CTGRY_CD'] == 1) & (pos2019_data['PRVDR_CTGRY_SBTYP_CD'] == 1)]

num_short_term_hospitals_2019 = short_term_hospitals_2019.shape[0]
print(num_short_term_hospitals_2019)

### plot
import altair as alt

yearly_counts_df = pd.DataFrame({
    'Year': [2016, 2017, 2018, 2019],
    'Count': [7245, 7260, 7277, 7303]  
})

chart = alt.Chart(yearly_counts_df).mark_line(point=alt.OverlayMarkDef(size=80, color='blue')).encode(
    x=alt.X('Year:O', title='Year', axis=alt.Axis(labelAngle=0)),
    y=alt.Y('Count:Q', title='Number of Short-Term Hospitals', scale=alt.Scale(domain=[7200, 7400])),
    tooltip=[alt.Tooltip('Year', title='Year'), alt.Tooltip('Count', title='Hospitals')]
).properties(
    title="Number of Short-Term Hospitals by Year (2016-2019)",
    width=600,
    height=400
).configure_line(
    size=3
).configure_title(
    fontSize=16,
    anchor='middle',
)

chart.display()
```

4. 
    a. 
```{python}
file_paths = {
    "2016": "/Users/Kaijie/Desktop/problem-set-4-kj-partner-ps4/pos2016.csv",
    "2017": "/Users/Kaijie/Desktop/problem-set-4-kj-partner-ps4/pos2017.csv",
    "2018": "/Users/Kaijie/Desktop/problem-set-4-kj-partner-ps4/pos2018.csv",
    "2019": "/Users/Kaijie/Desktop/problem-set-4-kj-partner-ps4/pos2019.csv"
}

short_term_hospitals_per_year = {}

for year, file_path in file_paths.items():
    data = pd.read_csv(file_path, encoding='latin1')  
    short_term_hospitals = data[(data['PRVDR_CTGRY_CD'] == 1) & (data['PRVDR_CTGRY_SBTYP_CD'] == 1)]
    short_term_hospitals_per_year[year] = short_term_hospitals['PRVDR_NUM'].nunique()  

short_term_hospitals_df = pd.DataFrame(list(short_term_hospitals_per_year.items()), columns=['Year', 'Short-Term Hospitals'])

chart = alt.Chart(short_term_hospitals_df).mark_line(point=True).encode(
    x=alt.X('Year:O', title='Year'),
    y=alt.Y('Short-Term Hospitals:Q', title='Short-Term Hospitals', scale=alt.Scale(domain=[7200,7400])), 
    tooltip=['Year', 'Short-Term Hospitals']
).properties(
    title='Number of Short-Term Hospitals per Year',
    width=500,
    height=300
)
chart.display()
```
    b. Compared with the plot from previsou step, we can see these two plots are the same. It means the number of short-numbers is the same. It demonstrates that there is no error in the dataset for short-term hospitals.


## Identify hospital closures in POS file (15 pts) (*)

1. 
The suspected hospital closure is 174.
```{python}
short_term_hospitals_2016.loc[:, 'Year'] = 2016
short_term_hospitals_2017.loc[:, 'Year'] = 2017
short_term_hospitals_2018.loc[:, 'Year'] = 2018 
short_term_hospitals_2019.loc[:, 'Year'] = 2019

df_combine = pd.concat([short_term_hospitals_2016, short_term_hospitals_2017, short_term_hospitals_2018, short_term_hospitals_2019], ignore_index=True)

hospitals_2016_active = df_combine[(df_combine['Year'] == 2016) & (df_combine['PGM_TRMNTN_CD'] == 0)]

hospital_closure = pd.DataFrame(columns=['PRVDR_NUM', 'FAC_NAME', 'ZIP_CD', 'Year of Closure'])

for year in range(2017, 2020):
    active_hospitals_current_year = set(df_combine[(df_combine['Year'] == year) & 
                                                   (df_combine['PGM_TRMNTN_CD'] == 0)]['PRVDR_NUM'])
    year_closures = pd.DataFrame()

    for _, hospital_info in hospitals_2016_active.iterrows():
        if hospital_info['PRVDR_NUM'] not in active_hospitals_current_year:
            closure_entry = pd.DataFrame({
                'PRVDR_NUM': [hospital_info['PRVDR_NUM']],
                'FAC_NAME': [hospital_info['FAC_NAME']],
                'ZIP_CD': [hospital_info['ZIP_CD']],
                'Year of Closure': [year]
            })
            year_closures = pd.concat([year_closures, closure_entry], ignore_index=True)
    
    hospital_closure = pd.concat([hospital_closure, year_closures], ignore_index=True)

hospital_closure.drop_duplicates(subset='PRVDR_NUM', inplace=True)

print(hospital_closure)
print(f"Total suspected closures: {len(hospital_closure)}")
```

2.
```{python}
sorted_hospitals = hospital_closure.sort_values(by='FAC_NAME').head(10)

print(sorted_hospitals[['FAC_NAME', 'Year of Closure']])
```

3. 
    a.
The number of potential merger/acquisition is 148.
```{python}
potential_mergers = []
for index, row in hospital_closure.iterrows():
    zip_code = row['ZIP_CD']
    closure_year = row['Year of Closure']

    next_year_data = df_combine[(df_combine['Year'] == closure_year + 1) & 
                                (df_combine['ZIP_CD'] == zip_code) & 
                                (df_combine['PGM_TRMNTN_CD'] == 0)]
    
    current_year_data = df_combine[(df_combine['Year'] == closure_year) & 
                                   (df_combine['ZIP_CD'] == zip_code) & 
                                   (df_combine['PGM_TRMNTN_CD'] == 0)]

    if len(next_year_data) >= len(current_year_data):
        potential_mergers.append(row['PRVDR_NUM'])

corrected_closures = hospital_closure[~hospital_closure['PRVDR_NUM'].isin(potential_mergers)]

mergers_count = len(potential_mergers)
print(f"Number of potential mergers/acquisitions: {mergers_count}")
```

    b.
The number of corrected suspected hospital closure is 26.
```{python}
remaining_hospitals_count = len(corrected_closures)
print(f"Remaining suspected closures after correction: {remaining_hospitals_count}")
```

    c.
```{python}
sorted_corrected_hospitals = corrected_closures.sort_values(by='FAC_NAME').head(10)
print(sorted_corrected_hospitals[['FAC_NAME', 'Year of Closure']])
```

## Download Census zip code shapefile (10 pt) 

1. 
    a.
The five file types are shape file (.shp), shape index file (.shx), attribute data file (.dbf), projection file (.prj), and metadata file (.xml).

Shape file involves the geometry data, which is the shapes of geopraphical features. 
Shape index file is an index for the above geometry data.
Attribute data file Holds attribute data in a dBase table format, where each row corresponds to a shape in the shape file, providing details such as ZIP code and other metadata.
Projection file is the information about the coordinate system and projection used. It is critical for accurately aligning shapefile data on a map.
Meta file provides the information about the shapefile, including its origin, date of creation, and any limitations on its usage.

    b. 
The size of attribute data file is 6.4 MB.
The size of projection file is 165 bytes.
The size of shape file is 837.5 MB.
The size of shape index file is 265 KB.
The size of metadata file is 16 KB.

2. 
```{python}
import geopandas as gpd
import altair as alt
import json

zip_shapefile = gpd.read_file('/Users/Kaijie/Desktop/gz_2010_us_860_00_500k/gz_2010_us_860_00_500k.shp')
texas_zip_shapefile = zip_shapefile[zip_shapefile['ZCTA5CE10'].str.startswith(('75', '76', '77'))]

pos_2016 = df_combine[(df_combine['Year'] == 2016) & (df_combine['PGM_TRMNTN_CD'] == 0)]

hospital_counts = pos_2016['ZIP_CD'].value_counts().reset_index()
hospital_counts.columns = ['ZIP_CD', 'Hospital_Count']

texas_zip_shapefile['ZIP_CD'] = texas_zip_shapefile['ZCTA5CE10'].astype(int)
texas_map_data = texas_zip_shapefile.merge(hospital_counts, how='left', left_on='ZIP_CD', right_on='ZIP_CD')
texas_map_data['Hospital_Count'].fillna(0, inplace=True)  
texas_geojson = json.loads(texas_map_data.to_json())

choropleth = alt.Chart(alt.Data(values=texas_geojson['features'])).mark_geoshape().encode(
    color=alt.Color('properties.Hospital_Count:Q', scale=alt.Scale(scheme='blues'), title='Number of Hospitals'),
    tooltip=[
        alt.Tooltip('properties.ZCTA5CE10:O', title='ZIP Code'),
        alt.Tooltip('properties.Hospital_Count:Q', title='Hospital Count')
    ]
).transform_calculate(
    ZCTA5CE10='datum.properties.ZCTA5CE10',
    Hospital_Count='datum.properties.Hospital_Count'
).properties(
    width=600,
    height=400,
    title='Number of Hospitals per ZIP Code in Texas (2016)'
)

choropleth.display()
```

## Calculate zip code’s distance to the nearest hospital (20 pts) (*)

1. 
2. 
3. 
4. 
    a.
    b.
    c.
5. 
    a.
    b.
    c.
    
## Effects of closures on access in Texas (15 pts)

1. 
2. 
3. 
4. 

## Reflecting on the exercise (10 pts) 
